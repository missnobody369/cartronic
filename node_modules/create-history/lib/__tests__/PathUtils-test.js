'use strict';

var _expect = require('expect');

var _expect2 = _interopRequireDefault(_expect);

var _PathUtils = require('../PathUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('addQueryStringValueToPath', function () {
  describe('when the path has no query string', function () {
    it('creates a new query string', function () {
      (0, _expect2.default)((0, _PathUtils.addQueryStringValueToPath)('/a/b/c', 'key', 'value')).toEqual('/a/b/c?key=value');
    });
  });

  describe('when the path has a query string', function () {
    it('appends to the existing query string', function () {
      (0, _expect2.default)((0, _PathUtils.addQueryStringValueToPath)('/a/b/c?a=b', 'key', 'value')).toEqual('/a/b/c?a=b&key=value');
    });
  });

  describe('when the path has a hash', function () {
    describe('but no query string', function () {
      it('creates a new query string', function () {
        (0, _expect2.default)((0, _PathUtils.addQueryStringValueToPath)('/a/b/c#the-hash', 'key', 'value')).toEqual('/a/b/c?key=value#the-hash');
      });
    });

    describe('and a query string', function () {
      it('appends to the existing query string', function () {
        (0, _expect2.default)((0, _PathUtils.addQueryStringValueToPath)('/a/b/c?a=b#the-hash', 'key', 'value')).toEqual('/a/b/c?a=b&key=value#the-hash');
      });
    });
  });
});

describe('stripQueryStringValueFromPath', function () {
  describe('when the path has no query string', function () {
    it('returns the same path', function () {
      var path = '/a/b/c';
      (0, _expect2.default)((0, _PathUtils.stripQueryStringValueFromPath)(path, 'key')).toEqual(path);
    });
  });

  describe('when the path has a query string with no matching key', function () {
    it('returns the same path', function () {
      var path = '/a/b/c?a=b';
      (0, _expect2.default)((0, _PathUtils.stripQueryStringValueFromPath)(path, 'key')).toEqual(path);
    });
  });

  describe('when the path has a query string with a matching key', function () {
    it('removes the key/value pair', function () {
      (0, _expect2.default)((0, _PathUtils.stripQueryStringValueFromPath)('/a/b/c?key=value&a=b', 'key')).toEqual('/a/b/c?a=b');

      (0, _expect2.default)((0, _PathUtils.stripQueryStringValueFromPath)('/a/b/c?a=b&key=value', 'key')).toEqual('/a/b/c?a=b');

      (0, _expect2.default)((0, _PathUtils.stripQueryStringValueFromPath)('/a/b/c?a=b&key=value&c=d', 'key')).toEqual('/a/b/c?a=b&c=d');
    });
  });

  describe('when the path has a query string with only that matching key', function () {
    it('removes the entire query string', function () {
      (0, _expect2.default)((0, _PathUtils.stripQueryStringValueFromPath)('/a/b/c?key=value', 'key')).toEqual('/a/b/c');
    });
  });

  describe('when the path has a hash', function () {
    describe('but no query string', function () {
      it('returns the same path', function () {
        (0, _expect2.default)((0, _PathUtils.stripQueryStringValueFromPath)('/a/b/c#the-hash')).toEqual('/a/b/c#the-hash');
      });
    });

    describe('and a query string with a matching key', function () {
      it('removes the key/value pair', function () {
        (0, _expect2.default)((0, _PathUtils.stripQueryStringValueFromPath)('/a/b/c?key=value&a=b#the-hash', 'key')).toEqual('/a/b/c?a=b#the-hash');

        (0, _expect2.default)((0, _PathUtils.stripQueryStringValueFromPath)('/a/b/c?a=b&key=value&c=d#the-hash', 'key')).toEqual('/a/b/c?a=b&c=d#the-hash');
      });
    });
  });
});

describe('getQueryStringValueFromPath', function () {
  describe('when the path has no query string', function () {
    it('returns null', function () {
      (0, _expect2.default)((0, _PathUtils.getQueryStringValueFromPath)('/a/b/c', 'key')).toBe(null);
    });
  });

  describe('when the path has a query string with a matching key', function () {
    it('returns the value for that key', function () {
      (0, _expect2.default)((0, _PathUtils.getQueryStringValueFromPath)('/a/b/c?a=b&c=value', 'c')).toBe('value');
    });
  });
});

describe('createPath', function () {
  describe('with a search of "?"', function () {
    it('omits the search entirely', function () {
      (0, _expect2.default)((0, _PathUtils.createPath)({
        pathname: '/a/b/c',
        search: '?',
        hash: '#the-hash'
      })).toEqual('/a/b/c#the-hash');
    });
  });
});