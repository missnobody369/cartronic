'use strict';

exports.__esModule = true;

var _expect = require('expect');

var _expect2 = _interopRequireDefault(_expect);

var _Actions = require('../Actions');

var _execSteps = require('./execSteps');

var _execSteps2 = _interopRequireDefault(_execSteps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var describeGo = function describeGo(createHistory) {
  describe('go', function () {
    var history = void 0;
    beforeEach(function () {
      history = createHistory();
    });

    // Some browsers need a little time to reflect the
    // hashchange before starting the next test
    afterEach(function (done) {
      return setTimeout(done, 100);
    });

    describe('back', function () {
      it('calls change listeners with the previous location', function (done) {
        var steps = [function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toBe(null);

          history.push({
            pathname: '/home',
            search: '?the=query',
            state: { the: 'state' }
          });
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('?the=query');
          (0, _expect2.default)(location.state).toEqual({ the: 'state' });
          (0, _expect2.default)(location.action).toEqual(_Actions.PUSH);
          (0, _expect2.default)(location.key).toExist();

          history.goBack();
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toBe(null);
        }];

        (0, _execSteps2.default)(steps, history, done);
      });
    });

    describe('forward', function () {
      it('calls change listeners with the next location', function (done) {
        var steps = [function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toBe(null);

          history.push({
            pathname: '/home',
            search: '?the=query',
            state: { the: 'state' }
          });
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('?the=query');
          (0, _expect2.default)(location.state).toEqual({ the: 'state' });
          (0, _expect2.default)(location.action).toEqual(_Actions.PUSH);
          (0, _expect2.default)(location.key).toExist();

          history.goBack();
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toBe(null);

          history.goForward();
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('?the=query');
          (0, _expect2.default)(location.state).toEqual({ the: 'state' });
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toExist();
        }];

        (0, _execSteps2.default)(steps, history, done);
      });
    });
  });
};

exports.default = describeGo;