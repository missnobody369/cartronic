'use strict';

exports.__esModule = true;

var _expect = require('expect');

var _expect2 = _interopRequireDefault(_expect);

var _Actions = require('../Actions');

var _execSteps = require('./execSteps');

var _execSteps2 = _interopRequireDefault(_execSteps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var describePathCoding = function describePathCoding(createHistory) {
  describe('with the "hashbang" hashType', function () {
    var history = void 0;
    beforeEach(function () {
      history = createHistory({
        hashType: 'hashbang'
      });
    });

    // Some browsers need a little time to reflect the
    // hashchange before starting the next test
    afterEach(function (done) {
      return setTimeout(done, 100);
    });

    describe('createHref', function () {
      it('knows how to make hrefs', function () {
        (0, _expect2.default)(history.createHref('/a/path')).toEqual('#!/a/path');
      });
    });

    describe('navigation', function () {
      it('calls change listeners with the correct location', function (done) {
        var steps = [function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toBe(null);

          (0, _expect2.default)(window.location.hash).toEqual('#!');

          history.push({
            pathname: '/home',
            search: '?the=query',
            state: { the: 'state' }
          });
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('?the=query');
          (0, _expect2.default)(location.state).toEqual({ the: 'state' });
          (0, _expect2.default)(location.action).toEqual(_Actions.PUSH);
          (0, _expect2.default)(location.key).toExist();

          (0, _expect2.default)(window.location.hash).toMatch(/^#!\/home/);

          history.goBack();
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toBe(null);

          (0, _expect2.default)(window.location.hash).toEqual('#!');

          history.goForward();
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('?the=query');
          (0, _expect2.default)(location.state).toEqual({ the: 'state' });
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toExist();

          (0, _expect2.default)(window.location.hash).toMatch(/^#!\/home/);
        }];

        (0, _execSteps2.default)(steps, history, done);
      });
    });
  });

  describe('with the "noslash" hashType', function () {
    var history = void 0;
    beforeEach(function () {
      history = createHistory({
        hashType: 'noslash'
      });
    });

    // Some browsers need a little time to reflect the
    // hashchange before starting the next test
    afterEach(function (done) {
      return setTimeout(done, 100);
    });

    describe('createHref', function () {
      it('knows how to make hrefs', function () {
        (0, _expect2.default)(history.createHref('/a/path')).toEqual('#a/path');
      });
    });

    describe('navigation', function () {
      it('calls change listeners with the correct location', function (done) {
        var steps = [function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toBe(null);

          // IE 10+ gives us "#", everyone else gives us ""
          (0, _expect2.default)(window.location.hash).toMatch(/^#?$/);

          history.push({
            pathname: '/home',
            search: '?the=query',
            state: { the: 'state' }
          });
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('?the=query');
          (0, _expect2.default)(location.state).toEqual({ the: 'state' });
          (0, _expect2.default)(location.action).toEqual(_Actions.PUSH);
          (0, _expect2.default)(location.key).toExist();

          (0, _expect2.default)(window.location.hash).toMatch(/^#home/);

          history.goBack();
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toBe(null);

          // IE 10+ gives us "#", everyone else gives us ""
          (0, _expect2.default)(window.location.hash).toMatch(/^#?$/);

          history.goForward();
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('?the=query');
          (0, _expect2.default)(location.state).toEqual({ the: 'state' });
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toExist();

          (0, _expect2.default)(window.location.hash).toMatch(/^#home/);
        }];

        (0, _execSteps2.default)(steps, history, done);
      });
    });
  });

  describe('with the "slash" hashType', function () {
    var history = void 0;
    beforeEach(function () {
      history = createHistory({
        hashType: 'slash'
      });
    });

    // Some browsers need a little time to reflect the
    // hashchange before starting the next test
    afterEach(function (done) {
      return setTimeout(done, 100);
    });

    describe('createHref', function () {
      it('knows how to make hrefs', function () {
        (0, _expect2.default)(history.createHref('a/path')).toEqual('#/a/path');
      });
    });

    describe('navigation', function () {
      it('calls change listeners with the correct location', function (done) {
        var steps = [function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toBe(null);

          (0, _expect2.default)(window.location.hash).toEqual('#/');

          history.push({
            pathname: '/home',
            search: '?the=query',
            state: { the: 'state' }
          });
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('?the=query');
          (0, _expect2.default)(location.state).toEqual({ the: 'state' });
          (0, _expect2.default)(location.action).toEqual(_Actions.PUSH);
          (0, _expect2.default)(location.key).toExist();

          (0, _expect2.default)(window.location.hash).toMatch(/^#\/home/);

          history.goBack();
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toBe(null);

          (0, _expect2.default)(window.location.hash).toEqual('#/');

          history.goForward();
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('?the=query');
          (0, _expect2.default)(location.state).toEqual({ the: 'state' });
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toExist();

          (0, _expect2.default)(window.location.hash).toMatch(/^#\/home/);
        }];

        (0, _execSteps2.default)(steps, history, done);
      });
    });
  });
};

exports.default = describePathCoding;