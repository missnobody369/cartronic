'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _expect = require('expect');

var _expect2 = _interopRequireDefault(_expect);

var _Actions = require('../Actions');

var _useBasename = require('../useBasename');

var _useBasename2 = _interopRequireDefault(_useBasename);

var _execSteps = require('./execSteps');

var _execSteps2 = _interopRequireDefault(_execSteps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var stripHash = function stripHash(path) {
  return path.replace(/^#/, '');
};

var describeBasename = function describeBasename(createHistory) {
  describe('basename handling', function () {
    var history = void 0;
    beforeEach(function () {
      history = (0, _useBasename2.default)(createHistory)({
        basename: '/base/url'
      });
    });

    describe('in push', function () {
      it('works with string', function (done) {
        var steps = [function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toBe(null);
          (0, _expect2.default)(location.basename).toEqual('');

          history.push('/home');
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.PUSH);
          (0, _expect2.default)(location.key).toExist();
          (0, _expect2.default)(location.basename).toEqual('/base/url');
        }];

        (0, _execSteps2.default)(steps, history, done);
      });

      it('works with object', function (done) {
        var steps = [function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toBe(null);
          (0, _expect2.default)(location.basename).toEqual('');

          history.push({
            pathname: '/home',
            state: { the: 'state' }
          });
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toEqual({ the: 'state' });
          (0, _expect2.default)(location.action).toEqual(_Actions.PUSH);
          (0, _expect2.default)(location.key).toExist();
          (0, _expect2.default)(location.basename).toEqual('/base/url');

          history.push(_extends({}, location, {
            pathname: '/foo'
          }));
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/foo');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toEqual({ the: 'state' });
          (0, _expect2.default)(location.action).toEqual(_Actions.PUSH);
          (0, _expect2.default)(location.key).toExist();
          (0, _expect2.default)(location.basename).toEqual('/base/url');
        }];

        (0, _execSteps2.default)(steps, history, done);
      });
    });

    describe('in replace', function () {
      it('works with string', function (done) {
        var steps = [function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toBe(null);
          (0, _expect2.default)(location.basename).toEqual('');

          history.replace('/home');
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.REPLACE);
          (0, _expect2.default)(location.key).toExist();
          (0, _expect2.default)(location.basename).toEqual('/base/url');
        }];

        (0, _execSteps2.default)(steps, history, done);
      });

      it('works with object', function (done) {
        var steps = [function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toBe(null);
          (0, _expect2.default)(location.basename).toEqual('');

          history.replace({
            pathname: '/home',
            state: { the: 'state' }
          });
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toEqual({ the: 'state' });
          (0, _expect2.default)(location.action).toEqual(_Actions.REPLACE);
          (0, _expect2.default)(location.key).toExist();
          (0, _expect2.default)(location.basename).toEqual('/base/url');

          history.replace(_extends({}, location, {
            pathname: '/foo'
          }));
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/foo');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.state).toEqual({ the: 'state' });
          (0, _expect2.default)(location.action).toEqual(_Actions.REPLACE);
          (0, _expect2.default)(location.key).toExist();
          (0, _expect2.default)(location.basename).toEqual('/base/url');
        }];

        (0, _execSteps2.default)(steps, history, done);
      });
    });

    describe('in createPath', function () {
      it('works', function () {
        (0, _expect2.default)(history.createPath('/the/path')).toEqual('/base/url/the/path');
      });
    });

    describe('in createHref', function () {
      it('works', function () {
        (0, _expect2.default)(stripHash(history.createHref('/the/path'))).toEqual('/base/url/the/path');
      });
    });

    describe('in createLocation', function () {
      it('works with string', function () {
        var location = history.createLocation('/the/path');

        (0, _expect2.default)(location.pathname).toEqual('/the/path');
        (0, _expect2.default)(location.basename).toEqual('/base/url');
      });

      it('works with object without query', function () {
        var location = history.createLocation({
          pathname: '/the/path'
        });

        (0, _expect2.default)(location.pathname).toEqual('/the/path');
        (0, _expect2.default)(location.basename).toEqual('/base/url');
      });

      it('works with string contains search', function () {
        var location = history.createLocation('/the/path?a=1&b=2');

        (0, _expect2.default)(location.pathname).toEqual('/the/path');
        (0, _expect2.default)(location.basename).toEqual('/base/url');
        (0, _expect2.default)(location.search).toEqual('?a=1&b=2');
      });
    });
  });
};

exports.default = describeBasename;