'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _expect = require('expect');

var _expect2 = _interopRequireDefault(_expect);

var _Actions = require('../Actions');

var _LocationUtils = require('../LocationUtils');

var _useQueries = require('../useQueries');

var _useQueries2 = _interopRequireDefault(_useQueries);

var _execSteps = require('./execSteps');

var _execSteps2 = _interopRequireDefault(_execSteps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var stripHash = function stripHash(path) {
  return path.replace(/^#/, '');
};

var describeQueries = function describeQueries(createHistory) {
  describe('default query serialization', function () {
    var history = void 0;
    beforeEach(function () {
      history = (0, _useQueries2.default)(createHistory)();
    });

    describe('in push', function () {
      it('works', function (done) {
        var steps = [function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.query).toEqual((0, _LocationUtils.createQuery)());
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toBe(null);

          history.push({
            pathname: '/home',
            query: { the: 'query value' },
            state: { the: 'state' }
          });
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('?the=query+value');
          (0, _expect2.default)(location.query).toEqual((0, _LocationUtils.createQuery)({ the: 'query value' }));
          (0, _expect2.default)(location.state).toEqual({ the: 'state' });
          (0, _expect2.default)(location.action).toEqual(_Actions.PUSH);
          (0, _expect2.default)(location.key).toExist();

          history.push(_extends({}, location, {
            query: { other: 'query value' },
            state: { other: 'state' }
          }));
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('?other=query+value');
          (0, _expect2.default)(location.query).toEqual((0, _LocationUtils.createQuery)({ other: 'query value' }));
          (0, _expect2.default)(location.state).toEqual({ other: 'state' });
          (0, _expect2.default)(location.action).toEqual(_Actions.PUSH);
          (0, _expect2.default)(location.key).toExist();

          history.push(_extends({}, location, {
            query: {},
            state: null
          }));
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.query).toEqual((0, _LocationUtils.createQuery)());
          (0, _expect2.default)(location.state).toBe(null);
          (0, _expect2.default)(location.action).toEqual(_Actions.PUSH);
          (0, _expect2.default)(location.key).toExist();
        }];

        (0, _execSteps2.default)(steps, history, done);
      });
    });

    describe('in replace', function () {
      it('works', function (done) {
        var steps = [function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.query).toEqual((0, _LocationUtils.createQuery)({}));
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toBe(null);

          history.replace({
            pathname: '/home',
            query: { the: 'query value' },
            state: { the: 'state' }
          });
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('?the=query+value');
          (0, _expect2.default)(location.query).toEqual((0, _LocationUtils.createQuery)({ the: 'query value' }));
          (0, _expect2.default)(location.state).toEqual({ the: 'state' });
          (0, _expect2.default)(location.action).toEqual(_Actions.REPLACE);
          (0, _expect2.default)(location.key).toExist();

          history.replace(_extends({}, location, {
            query: { other: 'query value' },
            state: { other: 'state' }
          }));
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('?other=query+value');
          (0, _expect2.default)(location.query).toEqual((0, _LocationUtils.createQuery)({ other: 'query value' }));
          (0, _expect2.default)(location.state).toEqual({ other: 'state' });
          (0, _expect2.default)(location.action).toEqual(_Actions.REPLACE);
          (0, _expect2.default)(location.key).toExist();
        }];

        (0, _execSteps2.default)(steps, history, done);
      });
    });

    describe('in createPath', function () {
      it('works', function () {
        (0, _expect2.default)(history.createPath({
          pathname: '/the/path',
          query: { the: 'query value' }
        })).toEqual('/the/path?the=query+value');
      });

      it('does not strip trailing slash', function () {
        (0, _expect2.default)(history.createPath({
          pathname: '/the/path/',
          query: { the: 'query value' }
        })).toEqual('/the/path/?the=query+value');
      });

      describe('when the path contains a hash', function () {
        it('puts the query before the hash', function () {
          (0, _expect2.default)(history.createPath({
            pathname: '/the/path',
            hash: '#the-hash',
            query: { the: 'query value' }
          })).toEqual('/the/path?the=query+value#the-hash');
        });
      });

      describe('when there is already an existing search', function () {
        it('overwrites the existing search', function () {
          (0, _expect2.default)(history.createPath({
            pathname: '/the/path',
            search: '?a=one',
            query: { the: 'query value' }
          })).toEqual('/the/path?the=query+value');
        });
      });
    });

    describe('in createLocation', function () {
      it('works with string', function () {
        var location = history.createLocation('/the/path?the=query');

        (0, _expect2.default)(location.pathname).toEqual('/the/path');
        (0, _expect2.default)(location.query).toEqual((0, _LocationUtils.createQuery)({ the: 'query' }));
        (0, _expect2.default)(location.search).toEqual('?the=query');
      });

      it('works with object with query', function () {
        var location = history.createLocation({
          pathname: '/the/path',
          query: { the: 'query' }
        });

        (0, _expect2.default)(location.pathname).toEqual('/the/path');
        (0, _expect2.default)(location.query).toEqual((0, _LocationUtils.createQuery)({ the: 'query' }));
        (0, _expect2.default)(location.search).toEqual('?the=query');
      });

      it('works with object without query', function () {
        var location = history.createLocation({
          pathname: '/the/path'
        });

        (0, _expect2.default)(location.pathname).toEqual('/the/path');
        (0, _expect2.default)(location.query).toEqual((0, _LocationUtils.createQuery)({}));
        (0, _expect2.default)(location.search).toEqual('');
      });

      it('works with explicit undefined values in query', function () {
        var location = history.createLocation({
          pathname: '/the/path',
          query: { the: undefined }
        });

        (0, _expect2.default)(location.pathname).toEqual('/the/path');
        (0, _expect2.default)(location.query).toEqual((0, _LocationUtils.createQuery)({ the: undefined }));
        (0, _expect2.default)(location.search).toEqual('');
      });
    });

    describe('in createHref', function () {
      it('works', function () {
        (0, _expect2.default)(stripHash(history.createHref({
          pathname: '/the/path',
          query: { the: 'query value' }
        }))).toEqual('/the/path?the=query+value');
      });
    });
  });

  describe('custom query serialization', function () {
    var history = void 0;
    beforeEach(function () {
      history = (0, _useQueries2.default)(createHistory)({
        parseQueryString: function parseQueryString() {
          return 'PARSE_QUERY_STRING';
        },
        stringifyQuery: function stringifyQuery() {
          return 'STRINGIFY_QUERY';
        }
      });
    });

    describe('in push', function () {
      it('works', function (done) {
        var steps = [function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.query).toEqual('PARSE_QUERY_STRING');
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toBe(null);

          history.push({
            pathname: '/home',
            query: { the: 'query' },
            state: { the: 'state' }
          });
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('?STRINGIFY_QUERY');
          (0, _expect2.default)(location.query).toEqual('PARSE_QUERY_STRING');
          (0, _expect2.default)(location.state).toEqual({ the: 'state' });
          (0, _expect2.default)(location.action).toEqual(_Actions.PUSH);
          (0, _expect2.default)(location.key).toExist();
        }];

        (0, _execSteps2.default)(steps, history, done);
      });
    });

    describe('in replace', function () {
      it('works', function (done) {
        var steps = [function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/');
          (0, _expect2.default)(location.search).toEqual('');
          (0, _expect2.default)(location.query).toEqual('PARSE_QUERY_STRING');
          (0, _expect2.default)(location.state).toBe(undefined);
          (0, _expect2.default)(location.action).toEqual(_Actions.POP);
          (0, _expect2.default)(location.key).toBe(null);

          history.replace({
            pathname: '/home',
            query: { the: 'query' },
            state: { the: 'state' }
          });
        }, function (location) {
          (0, _expect2.default)(location.pathname).toEqual('/home');
          (0, _expect2.default)(location.search).toEqual('?STRINGIFY_QUERY');
          (0, _expect2.default)(location.query).toEqual('PARSE_QUERY_STRING');
          (0, _expect2.default)(location.state).toEqual({ the: 'state' });
          (0, _expect2.default)(location.action).toEqual(_Actions.REPLACE);
          (0, _expect2.default)(location.key).toExist();
        }];

        (0, _execSteps2.default)(steps, history, done);
      });
    });

    describe('in createPath', function () {
      it('works', function () {
        (0, _expect2.default)(history.createPath({
          pathname: '/the/path',
          query: { the: 'query' }
        })).toEqual('/the/path?STRINGIFY_QUERY');
      });

      it('does not strip trailing slash', function () {
        (0, _expect2.default)(history.createPath({
          pathname: '/the/path/',
          query: { the: 'query' }
        })).toEqual('/the/path/?STRINGIFY_QUERY');
      });

      describe('when the path contains a hash', function () {
        it('puts the query before the hash', function () {
          (0, _expect2.default)(history.createPath({
            pathname: '/the/path',
            hash: '#the-hash',
            query: { the: 'query' }
          })).toEqual('/the/path?STRINGIFY_QUERY#the-hash');
        });
      });

      describe('when there is already an existing search', function () {
        it('overwrites the existing search', function () {
          (0, _expect2.default)(history.createPath({
            pathname: '/the/path',
            search: '?a=one',
            query: { the: 'query' }
          })).toEqual('/the/path?STRINGIFY_QUERY');
        });
      });
    });

    describe('in createHref', function () {
      it('works', function () {
        (0, _expect2.default)(stripHash(history.createHref({
          pathname: '/the/path',
          query: { the: 'query' }
        }))).toEqual('/the/path?STRINGIFY_QUERY');
      });
    });
  });
};

exports.default = describeQueries;