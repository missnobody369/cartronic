'use strict';

var _expect = require('expect');

var _expect2 = _interopRequireDefault(_expect);

var _createHistory = require('../createHistory');

var _createHistory2 = _interopRequireDefault(_createHistory);

var _LocationUtils = require('../LocationUtils');

var _Actions = require('../Actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('a location', function () {
  it('knows its pathname', function () {
    var location = (0, _LocationUtils.createLocation)('/home?the=query#the-hash');
    (0, _expect2.default)(location.pathname).toEqual('/home');
  });

  it('knows its search string', function () {
    var location = (0, _LocationUtils.createLocation)('/home?the=query#the-hash');
    (0, _expect2.default)(location.search).toEqual('?the=query');
  });

  it('knows its hash', function () {
    var location = (0, _LocationUtils.createLocation)('/home?the=query#the-hash');
    (0, _expect2.default)(location.hash).toEqual('#the-hash');
  });

  it('compensates if the location is fully qualified', function () {
    var location = (0, _LocationUtils.createLocation)('https://example.com/home');
    (0, _expect2.default)(location.pathname).toEqual('/home');
  });

  it('does not strip URL-like strings in the query', function () {
    var location = (0, _LocationUtils.createLocation)('/home?redirect=https://example.com/');
    (0, _expect2.default)(location.pathname).toEqual('/home');
    (0, _expect2.default)(location.search).toEqual('?redirect=https://example.com/');
  });

  it('has undefined state by default', function () {
    var location = (0, _LocationUtils.createLocation)();
    (0, _expect2.default)(location.state).toBe(undefined);
  });

  it('uses pop navigation by default', function () {
    var location = (0, _LocationUtils.createLocation)();
    (0, _expect2.default)(location.action).toBe(_Actions.POP);
  });

  it('has a null key by default', function () {
    var location = (0, _LocationUtils.createLocation)();
    (0, _expect2.default)(location.key).toBe(null);
  });

  describe('created by a history object', function () {
    var history = void 0;
    beforeEach(function () {
      history = (0, _createHistory2.default)();
    });

    it('has a key by default', function () {
      var location = history.createLocation();
      (0, _expect2.default)(location.key).toExist();
    });
  });
});

describe('creating a location with an object', function () {
  it('puts the pathname, search, and hash in the proper order', function () {
    var location = (0, _LocationUtils.createLocation)({
      pathname: '/the/path',
      search: '?the=query',
      hash: '#the-hash'
    });

    (0, _expect2.default)(location.pathname).toEqual('/the/path');
    (0, _expect2.default)(location.search).toEqual('?the=query');
    (0, _expect2.default)(location.hash).toEqual('#the-hash');
  });
});